{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "efafd90d-fd00-41d0-96a6-c4d71d8f255e",
   "metadata": {},
   "source": [
    "# Project Title:\n",
    "\n",
    "### \"Call center operations optimization : A simulation - based approach to staffing , cost , and customer Experience.\""
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c79c705-f9ba-4f03-919d-db27aaeb162c",
   "metadata": {},
   "source": [
    "## 1. Understand Queueing Theory Basics\n",
    "    Models real-life services systems using M/M/1 and M/M/s queueing framework.\n",
    "    Interpret Key metrics such as utilization (p), average wait time, and system size.\n",
    "\n",
    "## 2. Perform Event-Based Simulations\n",
    "    Simulate customer"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52e66152-498b-46d3-b38d-17ff214501e3",
   "metadata": {},
   "source": [
    "# Step 1: Parameters & Packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "825b9530-822a-4a21-84ff-59c919efb342",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Arrival & service rates\n",
    "lamda = 20\n",
    "µ = 5\n",
    "shift_hours = 8\n",
    "\n",
    "# Simulation settings\n",
    "np.random.seed(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e4bfa71-2112-4456-a558-3d3a42e7c90a",
   "metadata": {},
   "source": [
    "# Step 2: Single-Run Simulation Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0f47e0bd-d80f-471f-94b4-77d338b4c81f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "s=1: avg wait 808.2 min,avg queue len 65.99\n"
     ]
    }
   ],
   "source": [
    "# Simulation settings\n",
    "np.random.seed(1)\n",
    "def simulate_queue(s):\n",
    "    \"\"\"\n",
    "    Simulate an M/M/s queue over 'shift_hours'.\n",
    "    Returns arrays of wait times (hrs) and system sizes at arrivals.\n",
    "    \"\"\"\n",
    "\n",
    "    # Generate arrival time until end of the shift\n",
    "    inter = np.random.exponential(1/lamda, int(lamda*shift_hours*1.5))\n",
    "    arrivals = np.cumsum(inter)\n",
    "    arrivals = arrivals[arrivals < shift_hours]\n",
    "    N = len(arrivals)\n",
    "\n",
    "    # Generate services times for each caller\n",
    "    services = np.random.exponential(1/µ , N)\n",
    "\n",
    "    # Track each server's next - free time\n",
    "    next_free = np.zeros(s)\n",
    "    wait_times = np.zeros(N)\n",
    "    system_size = np.zeros(N)\n",
    "\n",
    "    # Departure times list\n",
    "    dep_times = []\n",
    "\n",
    "    for i, t in enumerate (arrivals):\n",
    "        # FInd soonest-available agent \n",
    "            j = np.argmin(next_free)\n",
    "            start = max(t, next_free[j])\n",
    "            wait_times[i] = start-t\n",
    "            end = start + services[i]\n",
    "            next_free[j] = end\n",
    "            dep_times.append(end)\n",
    "\n",
    "            # Count how many callers are still in system at time t\n",
    "            system_size[i] = np.sum(np.array(dep_times) > t)\n",
    "        \n",
    "    return wait_times, system_size\n",
    "\n",
    "# Quick Test for s=1\n",
    "w1, q1 = simulate_queue(s=1)\n",
    "print(f\"s=1: avg wait {w1.mean()*60:.1f} min,avg queue len {q1.mean():.2f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "28ae1b14-3d47-40f2-a841-66d213919c66",
   "metadata": {},
   "source": [
    "# Step 3 : Compare to M/M/1 Analytic Formula\n",
    "\n",
    "    M/M/1 si a queueing model.\n",
    "        M = Memoryless arrivals (Poisson)\n",
    "        M = Memoryless service times (Exponential)\n",
    "        1 = One server/agent\n",
    "\n",
    "    We use forlmulas from queueing theory to estimate :\n",
    "        Average number of people in the system (L)\n",
    "        Average time spent in the system (W)\n",
    "\n",
    "        # Traffics intensity p for s=1\n",
    "        p1 = lamda / µ\n",
    "\n",
    "        This is called traffice intensity "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "301dfd3d-df19-45b1-ab38-a1433368bc5a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "M/M/1 analytics vs. simulation:\n",
      " Analytics system size L = -1.33\n",
      " Simulated avg system size = 65.99\n",
      " Analytic time inn system W = -4.00 min\n",
      " Simulated abg wait + service = 820.2 min\n"
     ]
    }
   ],
   "source": [
    "# Traffice intensity p for s = 1\n",
    "p1 = lamda / µ\n",
    "L_analytic = p1 / (1 - p1)\n",
    "W_analytic = L_analytic / lamda   # Hours\n",
    "\n",
    "\n",
    "print(\"M/M/1 analytics vs. simulation:\")\n",
    "print(f\" Analytics system size L = {L_analytic:.2f}\")\n",
    "print(f\" Simulated avg system size = {q1.mean():.2f}\")\n",
    "print(f\" Analytic time inn system W = {W_analytic*60:.2f} min\")\n",
    "print(f\" Simulated abg wait + service = {w1.mean()*60 + (1/µ)*60:.1f} min\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ae8c53f-2206-4ba2-bd15-f8b09eca9b7b",
   "metadata": {},
   "source": [
    "# Step 4: Test Staffing Levels (Agent = 1 to 5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6d46c841-728e-449e-b6a8-f99af7434437",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Agents  Avg Wait (Min)  95th-pct wait (min)  Avg System Size\n",
      "0       1      697.214437          1369.612086        57.838509\n",
      "1       2      302.261095           549.271769        53.319767\n",
      "2       3       85.889649           170.968262        24.240260\n",
      "3       4        6.076046            17.455365         5.887218\n",
      "4       5       12.704327            33.414296        10.275132\n",
      "\n",
      "Even 5 agents can't meet the min 95% wait target.\n"
     ]
    }
   ],
   "source": [
    "\n",
    "threshold = 5  # Minutes\n",
    "results = []\n",
    "\n",
    "for s in range(1,6):\n",
    "    w, q = simulate_queue(s)\n",
    "    # Convert hours to minutes\n",
    "    waits_min = w * 60\n",
    "    p95_wait = np.percentile(waits_min, 95)\n",
    "    results.append((s,waits_min.mean(), p95_wait, q.mean()))\n",
    "\n",
    "# Tabulate\n",
    "import pandas as pd\n",
    "df = pd.DataFrame(results, columns=['Agents','Avg Wait (Min)','95th-pct wait (min)','Avg System Size'])\n",
    "print(df)\n",
    "\n",
    "# Find minimal s meeting threshold\n",
    "good = df[df['95th-pct wait (min)'] <= threshold]\n",
    "if not good.empty:\n",
    "    best_s = int(good.iloc[0]['Agents'])\n",
    "    print(f\"\\n -> Schedule at least {best_s} agents to keep 95% of waits < = {threshold} min.\")\n",
    "else:\n",
    "    print(\"\\nEven 5 agents can't meet the min 95% wait target.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6234bd42-3728-4a03-b999-38ac160393a4",
   "metadata": {},
   "source": [
    "# Step 5 : Visulize wait-time Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b65fc59c-f9d6-4b06-8e08-219bcd78c5fc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x400 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(8,4))\n",
    "for s in [1,2,3,4,5]:\n",
    "    w, _ = simulate_queue(s)\n",
    "    plt.hist(w*60, bins=30, alpha=0.5, label=f's={s}')\n",
    "plt.axvline(threshold, color = 'k', linestyle = '--', label = '5 min target')\n",
    "plt.xlabel('Wait time (minutes)')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Wait-time Distribution for Different Agent Counts')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "944cd95b-12d7-45b2-8f78-807f262c6747",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "waits_min = [1,1,1,2,2,2,2,3,3,4,4,4,4,4,5]\n",
    "p95_wait = np.percentile(waits_min, 45)        # the number 45 shows that we give the data is 45%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3ee793ec-d505-435b-8802-ee5658a1885d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.3\n"
     ]
    }
   ],
   "source": [
    "print(p95_wait)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6c6bcd1-3afa-46dd-b28f-656b6d496815",
   "metadata": {},
   "source": [
    "# Step 6: Varying Time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "500b699e-b305-4fef-856d-ce6c0758b779",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Time-varying lamda, s=3 -> avg wait = 174.1 min\n"
     ]
    }
   ],
   "source": [
    "def simulate_queue_timevarying(s):\n",
    "    # define piecewise arrival rates per hour\n",
    "    periods = [(0,2,30), (2,6,20), (6,8,40)]  # (start,end,lamda)\n",
    "    arrivals = []\n",
    "    for start, end, lamda in periods:\n",
    "        duration = end - start\n",
    "        inter = np.random.exponential(1/lamda, int(lamda*duration*1.5))\n",
    "        ts = np.cumsum(inter) + start\n",
    "        arrivals.extend(ts[ts < end])     # extend is use to add to 2nd list in the same list.   \n",
    "    arrivals = np.array(arrivals)\n",
    "    arrivals.sort()\n",
    "\n",
    "    N = len(arrivals)\n",
    "    services = np.random.exponential(1/µ,N)\n",
    "    next_free = np.zeros(s)\n",
    "    wait_times = np.zeros(N)\n",
    "\n",
    "    for i,t in enumerate(arrivals):\n",
    "        j = np.argmin(next_free)\n",
    "        start = max(t, next_free[j])\n",
    "        wait_times[i] = start - t\n",
    "        next_free[j] = start + services[i]\n",
    "    return wait_times\n",
    "\n",
    "w_tv = simulate_queue_timevarying(s=3)\n",
    "print(f\"Time-varying lamda, s=3 -> avg wait = {w_tv.mean()*60:.1f} min\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9906ff6-525e-45fb-92a2-ee0b6f69ad46",
   "metadata": {},
   "source": [
    "# Step 7: Abandonment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "97ef4e13-e8d9-499b-914a-7537d4259a0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Abandon rate (s=4): 13.12%, avg wait on served calls: 0.6 min\n"
     ]
    }
   ],
   "source": [
    "def simulate_with_abandon(s, patience=5/60):\n",
    "    arrivals = np.cumsum(np.random.exponential(1/lamda, int(lamda*shift_hours*1.5)))\n",
    "    arrivals = arrivals[arrivals<shift_hours]\n",
    "    services = np.random.exponential(1/µ, len(arrivals))\n",
    "    next_free = np.zeros(s)\n",
    "    waits = []\n",
    "    abandons = 0\n",
    "\n",
    "    for i,t in enumerate(arrivals):\n",
    "        j = np.argmin(next_free)\n",
    "        start = max(t, next_free[j])\n",
    "        wait = start - t\n",
    "        if wait > patience:\n",
    "            abandons += 1\n",
    "        else:\n",
    "            waits.append(wait)\n",
    "            next_free[j] = start + services[i]\n",
    "    return np.array(waits), abandons/len(arrivals)\n",
    "\n",
    "w, ab_rate = simulate_with_abandon(s=4)\n",
    "print(f\"Abandon rate (s=4): {ab_rate:.2%}, avg wait on served calls: {w.mean()*60:.1f} min\")\n",
    "\n",
    "# shows the trade-off: fewer agents -> more abandonments -> lost revenue and satisfaction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "3ca1f360-2e74-4195-93e8-ad96f8c147f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6401227588477713"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wait_95 = np.percentile(w.mean()*60,95)\n",
    "wait_95"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f19675df-c3a8-46e5-a64a-dae5c4ea1217",
   "metadata": {},
   "source": [
    "# Step 8: Agent Break Scheduling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "97de9dc3-3cb3-4458-bb69-50d3775469d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "With breaks, s=3 -> avg wait = 97.0 min\n"
     ]
    }
   ],
   "source": [
    "def simulate_with_breaks(s, break_start=3, break_length=0.25):\n",
    "    arrivals = np.cumsum(np.random.exponential(1/lamda, int(lamda*shift_hours*1.5)))\n",
    "    arrivals = arrivals[arrivals<shift_hours]\n",
    "    services = np.random.exponential(1/µ, len(arrivals))\n",
    "    next_free = np.zeros(s)\n",
    "    waits = []\n",
    "\n",
    "    for i,t in enumerate(arrivals):\n",
    "        # if in break window, one fewer agent\n",
    "        avail = next_free.copy()\n",
    "        if break_start < t < break_start + break_length:\n",
    "            avail = np.delete(avail, 0) #remove one agent\n",
    "        j = np.argmin(avail)\n",
    "        start = max(t, avail[j])\n",
    "        waits.append(start - t)\n",
    "        # Update that agent's free time in original array\n",
    "        idx = j + (1 if break_start < t < break_start + break_length else 0)\n",
    "        next_free[idx] = start + services[i]\n",
    "    return np.array(waits)\n",
    "\n",
    "w_b = simulate_with_breaks(s=3)\n",
    "print(f\"With breaks, s=3 -> avg wait = {w_b.mean()*60:.1f} min\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79460e54-f20a-45c8-94a3-c7e9c190dab0",
   "metadata": {},
   "source": [
    "# Step 9: Cost Optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3325a7c1-2185-448f-be07-0b647291eabb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Agent count, total cost:\n",
      " s=1: $192\n",
      " s=2: $389\n",
      " s=3: $537\n",
      " s=4: $739\n",
      " s=5: $862\n",
      " -> Optimal s by cost = 1\n"
     ]
    }
   ],
   "source": [
    "c_agent = 20    # $20/hr per agent\n",
    "c_wait = 0.50   # $0.50 per minutes waited\n",
    "\n",
    "costs = []\n",
    "for s in range(1,6):\n",
    "    w,_ = simulate_with_abandon(s)  # or choose another sim fn\n",
    "    total_wait_cost = w.sum()*60*c_wait\n",
    "    staff_cost = s *  c_agent * shift_hours\n",
    "    costs.append((s, staff_cost+total_wait_cost))\n",
    "\n",
    "opt = min(costs, key=lambda x: x[1] )\n",
    "print(\"Agent count, total cost:\")\n",
    "for s,c in costs: print(f\" s={s}: ${c:,.0f}\")\n",
    "print(f\" -> Optimal s by cost = {opt[0]}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a01d3ebb-dc78-4527-bfab-51077cfdb16f",
   "metadata": {},
   "source": [
    "# Step 10: 30-day simulation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "12797232-d158-4ec2-905e-9dc9de44691d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "days = 30\n",
    "daily = []\n",
    "for _ in range(days):\n",
    "    w,_ = simulate_with_abandon(opt[0])\n",
    "    daily.append((w.mean()*60, np.percentile(w*60,95)))\n",
    "df_days = pd.DataFrame(daily, columns=['AvgWait','P95Wait'])\n",
    "df_days.describe()\n",
    "df_days.hist(bins=10)\n",
    "plt.suptitle('30-Days Variability in Wait Times')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5b3471c0-27a4-424d-990d-789cb5a0aa66",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AvgWait</th>\n",
       "      <th>P95Wait</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>30.000000</td>\n",
       "      <td>30.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.271226</td>\n",
       "      <td>4.700200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.349033</td>\n",
       "      <td>0.189544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.733917</td>\n",
       "      <td>4.260374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.969218</td>\n",
       "      <td>4.658937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.244503</td>\n",
       "      <td>4.765721</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.481470</td>\n",
       "      <td>4.853617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.364453</td>\n",
       "      <td>4.913151</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         AvgWait    P95Wait\n",
       "count  30.000000  30.000000\n",
       "mean    2.271226   4.700200\n",
       "std     0.349033   0.189544\n",
       "min     1.733917   4.260374\n",
       "25%     1.969218   4.658937\n",
       "50%     2.244503   4.765721\n",
       "75%     2.481470   4.853617\n",
       "max     3.364453   4.913151"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_days.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5af8b5b-0237-432c-967a-3b71c29f1ac7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
